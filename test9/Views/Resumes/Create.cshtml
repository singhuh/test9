@using test9.Models;
@using Microsoft.AspNetCore.Identity
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager

@model test9.Models.Resume

@{
	ViewData["Title"] = "Create";
}

<h1>Upload Resume</h1>

<h4>Resume</h4>
<hr />
<div class="row">
	<div class="col-md-4">

		@if (SignInManager.IsSignedIn(User))
		{
			var user = await UserManager.GetUserAsync(User);

			<form asp-action="Create" enctype="multipart/form-data" method="post">
				<div asp-validation-summary="ModelOnly" class="text-danger" value=""></div>
				<div class="form-group">
					<input asp-for="UserId" type="hidden" class="form-control" value="@user.Id" />
				</div>
				<div class="form-group">
					<label asp-for="Description" class="control-label"></label>
					<input asp-for="Description" class="form-control" />
					<span asp-validation-for="Description" class="text-danger"></span>
				</div>
				<div class="form-group">
					<label asp-for="ResumeFile" class="control-label"></label>
					<input type="file" id="upload" name="file" class="form-control" required />

					<span asp-validation-for="ResumeFile" class="text-danger"></span>
				</div>
				<div class="form-group">
					<input type="submit" value="Create" class="btn btn-primary" />
				</div>
			</form>
		}
	</div>
</div>

<div>
	<a asp-action="Index" class="btn btn-info">Back to List</a>
</div>

@section Scripts {
	@{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
